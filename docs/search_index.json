[["index.html", "Data Analysis Coursebook Welcome License", " Data Analysis Coursebook Marcell Granat &amp; Zoltan Madari Welcome This is the online version of Mastering Shiny, a book currently under early development and intended for a late 2020 release by OReilly Media. Shiny is a framework for creating web applications using R code. It is designed primarily with data scientists in mind, and to that end, you can create pretty complicated Shiny apps with no knowledge of HTML, CSS, or JavaScript. On the other hand, Shiny doesnt limit you to creating trivial or prefabricated apps: its user interface components can be easily customized or extended, and its server uses reactive programming to let you create any type of back end logic you want. Shiny is designed to feel almost magically easy when youre getting started, and yet the deeper you get into how it works, the more you realize its built out of general building blocks that have strong software engineering principles behind them. Today, Shiny is used in almost as many niches and industries as R itself is. Its used in academia as a teaching tool for statistical concepts, a way to get undergrads excited about learning to write code, a splashy medium for showing off novel statistical methods or models. Its used by big pharma companies to speed collaboration between scientists and analysts during drug development. Its used by Silicon Valley tech companies to set up realtime metrics dashboards that incorporate advanced analytics. This book is designed to take you from knowing nothing about Shiny to being an expert developer who can write large complex apps that are still maintainable and performant. Youll gain a deep understanding of the reactive programming model that underlies Shiny, as well as building a tool box of useful techniques to solve common app challenges. License This book is licensed to you under Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. The code samples in this book are licensed under Creative Commons CC0 1.0 Universal (CC0 1.0), i.e.Â public domain. "],["syllabus.html", "Syllabus", " Syllabus Outline of Topics Week Lecture Topic Seminar Topic Homework/Exam 1 Introduction to R 2 Functional programming, RMarkdown 3 Tibble, Dplyr 4 Ggplot2 5 Statistical analysis, purrr 6 Statistical analysis, broom 7 "],["lecture1.html", "Chapter 1 Lecture 1", " Chapter 1 Lecture 1 You can often make your app more usable by giving the user more insight into what is happening. This might take the form of better messages when inputs dont make sense, or progress bars for operations that take a long time. Some feedback occurs naturally through outputs, which you already know how to use, but youll often need something else. The goal of this chapter is to show you some of your other options. Well start with techniques for validation, informing the user when an input (or combination of inputs) is in an invalid state. Well then continue on to notification, sending general messages to the user, and progress bars, which give details for time consuming operations made up of many small steps. Well finish up by discussing dangerous actions, and how you give your users peace of mind with confirmation dialogs or the ability to undo an action. "],["seminar1.html", "Chapter 2 Introduction to R 2.1 Why R? 2.2 Setup 2.3 Bootstrap 2.4 Themes", " Chapter 2 Introduction to R 2.1 Why R? In this chapter we will discuss the basics of R programming. R is a free software, used by millions in the field of statistics, data science, economics and many others. The R programming language is an important tool for data related tasks, but it is much more. Just like other programming languages, R has many additional packages, which can extend its basic functionality. R has a great (probably the best) graphical tools to create your charts, and with shiny, you can easily build your minimalist web applications. We will learn about data manipulation, analysis and how to create awesome reports, like dashboards. 2.2 Setup You can download R and RStudio from the official site of RStudio. Please install the appropriate version based on your OS, and do not forget that you also have to install R as well. Run Rs installer file after the downloading process is finished. Next, we will also need the RStudio. If the installation process of R and RStudio is finished, then we can open RStudio and start to learn the software. 2.3 Bootstrap To continue your app customisation journey, youll need to learn a little more about the Bootstrap framework used by Shiny. Bootstrap is a collection of HTML conventions, CSS styles, and JS snippets bundled up into a convenient form. Bootstrap grew out of a framework originally developed for Twitter and over the last 10 years has grown to become one of the most popular CSS frameworks used on the web. Bootstrap is also popular in R  youve undoubtedly seen many documents produced by rmarkdown::html_document() and used many package websites made by pkgdown, both of which also use Bootstrap. As a Shiny developer, you dont need to think too much about Bootstrap, because Shiny functions automatically generate bootstrap compatible HTML for you. But its good to know that Bootstrap exists because then: You can use bslib::bs_theme() to customise the visual appearance of your code, Section 2.4. You can use the class argument to customise some layouts, inputs, and outputs using Bootstrap class names, as you saw in Section ??. You can make your own functions to generate Bootstrap components that Shiny doesnt provide, as explained in Utility classes. Its also possible to use a completely different CSS framework. A number of existing R packages make this easy by wrapping popular alternatives to Bootstrap: shiny.semantic, by Appsilon, builds on top of formantic UI. shinyMobile, by RInterface, builds on top of framework 7, and is specifically designed for mobile apps. shinymaterial, by Eric Anderson, is built on top of Googles Material design framework. shinydashboard, also by RStudio, provides a layout system designed to create dashboards. You can find a fuller, and actively maintained, list at https://github.com/nanxstats/awesome-shiny-extensions. 2.4 Themes Bootstrap is so ubiquitous within the R community that its easy to get style fatigue: after a while every Shiny app and Rmd start to look the same. The solution is theming with the bslib package. bslib is relatively new package that allows you to override many Bootstrap defaults in order to create an appearance that is uniquely yours. As I write this, bslib is mostly applicable only to Shiny, but work is afoot to bring its enhanced theming power to RMarkdown, pkgdown, and more. If youre producing apps for your company, I highly recommend investing a little time in theming  theming your app to match your corporate style guide is an easy way to make yourself look good. 2.4.1 Getting started Create a theme with bslib::bs_theme() then apply it to an app with the theme argument of the page layout function: fluidPage( theme = bslib::bs_theme(...) ) If not specified, Shiny will use the classic Bootstrap v3 theme that it has used basically since it was created. By default, bslib::bs_theme(), will use Bootstrap v4. Using Bootstrap v4 instead of v3 will not cause problems if you only use built-in components. There is a possibility that it might cause problems if youve used custom HTML, so you can force it to stay with v3 with version = 3. 2.4.2 Shiny themes The easiest way to change the overall look of your app is to pick a premade bootswatch theme using the bootswatch argument to bslib::bs_theme(). Figure ?? shows the results of the following code, switching \"darkly\" out for other themes. "],["lecture2.html", "Chapter 3 Lecture 2", " Chapter 3 Lecture 2 You can often make your app more usable by giving the user more insight into what is happening. This might take the form of better messages when inputs dont make sense, or progress bars for operations that take a long time. Some feedback occurs naturally through outputs, which you already know how to use, but youll often need something else. The goal of this chapter is to show you some of your other options. Well start with techniques for validation, informing the user when an input (or combination of inputs) is in an invalid state. Well then continue on to notification, sending general messages to the user, and progress bars, which give details for time consuming operations made up of many small steps. Well finish up by discussing dangerous actions, and how you give your users peace of mind with confirmation dialogs or the ability to undo an action. "],["seminar2.html", "Chapter 4 Seminar 2 4.1 Motivation", " Chapter 4 Seminar 2 In this chapter, youll learn how to wrap ggplot2 and dplyr function in a Shiny app. (If you dont use the tidyverse, you can skip this chapter .) The techniques for wrapping ggplot2 and dplyr functions in a functions and package, are a a little different and covered in other resources like Using ggplot2 in packages or Programming with dplyr. 4.1 Motivation Imagine I want to create an app that allows you to filter a numeric variable to select rows that are greater than a threshold. You might write something like this: Lets begin with this call to filter() which uses a data-variable (carat) and an env-variable (min): ggplot(cars, aes(speed, dist)) + geom_point() "],["lecture3.html", "Chapter 5 Lecture 3", " Chapter 5 Lecture 3 You can often make your app more usable by giving the user more insight into what is happening. This might take the form of better messages when inputs dont make sense, or progress bars for operations that take a long time. Some feedback occurs naturally through outputs, which you already know how to use, but youll often need something else. The goal of this chapter is to show you some of your other options. Well start with techniques for validation, informing the user when an input (or combination of inputs) is in an invalid state. Well then continue on to notification, sending general messages to the user, and progress bars, which give details for time consuming operations made up of many small steps. Well finish up by discussing dangerous actions, and how you give your users peace of mind with confirmation dialogs or the ability to undo an action. "],["seminar3.html", "Chapter 6 Seminar 3 6.1 Upload", " Chapter 6 Seminar 3 Transferring files to and from the user is a common feature of apps. You can use it to upload data for analysis, or download the results as a dataset or as a report. This chapter shows the UI and server components that youll need to transfer files in and out of your app. 6.1 Upload Well start by discussing file uploads, showing you the basic UI and server components, and then showing how they fit together in a simple app. 6.1.1 UI "],["lecture4.html", "Chapter 7 Lecture 4 7.1 Motivation", " Chapter 7 Lecture 4 In this chapter, youll learn how to wrap ggplot2 and dplyr function in a Shiny app. (If you dont use the tidyverse, you can skip this chapter .) The techniques for wrapping ggplot2 and dplyr functions in a functions and package, are a a little different and covered in other resources like Using ggplot2 in packages or Programming with dplyr. 7.1 Motivation Imagine I want to create an app that allows you to filter a numeric variable to select rows that are greater than a threshold. You might write something like this: Lets begin with this call to filter() which uses a data-variable (carat) and an env-variable (min): ggplot(cars, aes(speed, dist)) + geom_point() "],["seminar4.html", "Chapter 8 Ggplot 8.1 MotivÃ¡ciÃ³ a ggplot package hasznÃ¡latÃ¡hoz 8.2 BevezetÃ©s 8.3 Esquisse 8.4 SzÃ­n 8.5 TÃ©ma 8.6 Geom 8.7 Aes 8.8 Facet 8.9 KitekintÃ©s", " Chapter 8 Ggplot 8.1 MotivÃ¡ciÃ³ a ggplot package hasznÃ¡latÃ¡hoz BÃ¡r maga a base R [Ã©rtve itt ilyenkor mindig a plot paranccsal kÃ©szÃ¼lt Ã¡brÃ¡kat] segÃ­tsÃ©gÃ©vel is lehet Ã¡brÃ¡kat kÃ©szÃ­teni, ez az egyszersÃ©gÃ©t leszÃ¡mÃ­tva nagyon ritkÃ¡n ajÃ¡nlott. Helyette Ã©rdemes a ggplot2-t alkalmazni, amely bÃ¡r komplexebb, mint a base R, a szemÃ©lyre szabhatÃ³sÃ¡gÃ¡nak szinte nincs fels hatÃ¡ra. Ãm amelett, hogy szebb Ã¡brÃ¡ink lesznek van egy sokkal fontosabb ok, amiÃ©rt a ggplotot hasznÃ¡ljuk. A csomag a nevÃ©t Leland Wilkinson Grammar of Graphics c.Â munkÃ¡ja utÃ¡n kapta (innen a gg), amelyben megfogalmazÃ¡sra kerÃ¼lt lÃ©nyegÃ©ben az ideÃ¡lis Ã¡brakÃ©szÃ­t algoritmus struktÃºrÃ¡ja. Mivel a ggplot2 ezt az elvet kÃ¶veti, Ã­gy meglÃ¡tjÃ¡tok majd, hogy bÃ¡r sok dolgot kell fejben tartani, minden logikus benne. MiutÃ¡n sikerÃ¼l elsajÃ¡tÃ­tani ezt az anyagot (Ã©s nÃ©mi utÃ¡na olvasÃ¡s utÃ¡n) bÃ¡rmilyen szÃ¼ksÃ©ges Ã¡brÃ¡t el fogtok tudni kÃ©szÃ­teni. 8.2 BevezetÃ©s A ggplot2 telepÃ­thet Ã¶nÃ¡llÃ³an is, illetve ez a csomag rÃ©sze egy csomaggyjtemÃ©nynek, amit tidyverse-nek hÃ­vnak. Jelenleg mi csak a ggplot2-vel fogunk foglalkozni, Ã­gy annak telepÃ­tÃ©se Ã©s betÃ¶ltÃ©se is bven elegend lesz. Ãgy annak fÃ¼ggvÃ©nyÃ©bne, hogy le van-e mÃ¡r tÃ¶ltve a package telepÃ­tsÃ¼k [install.packages(\"ggplot2\")], vagy ne, majd tÃ¶ltsÃ¼k be [library(ggplot2)]. A ggplot2 helyett lehet egybl a tidyverse-t is betÃ¶lteni, azonban jelenleg a tÃ¶bbi package redundÃ¡ns nekÃ¼nk. library(ggplot2) A ggplot2-vel kapunk nÃ©hÃ¡ny kiegÃ©szÃ­t adattÃ¡blÃ¡t, az egyszersÃ©g kedvÃ©Ã©rt hasznÃ¡ljuk most ezek kÃ¶zÃ¼l a diamonds-t. Pillanatra tekintsÃ¼k meg az adattÃ¡bla felÃ©pÃ­tÃ©sÃ©t: head(diamonds) #&gt; Error in tab_header(., &quot;A diamonds adattÃ¡bla&quot;): could not find function &quot;tab_header&quot; LÃ¡ssuk az els Ã¡brÃ¡nkat ggplottal! ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() Figure 8.1: A legels Ã¡brÃ¡nk ggplot hasznÃ¡latÃ¡val Amit lÃ¡tunk, hogy az Ã¡brÃ¡zolÃ¡s a ggplot paranccsal kezddik. Itt definiÃ¡lni kell, hogy melyik tÃ¡blÃ¡nak adatait szeretnÃ©nk felhasznÃ¡lni (diamonds), majd pedig az Ã¡brÃ¡zolÃ¡shoz hasznÃ¡lt keretet, ami az aes-es belÃ¼l kap helyet. Itt Ã¡ltalÃ¡ban (mint pÃ©ldÃ¡ul most) az x Ã©s y tengelyen Ã¡brÃ¡zolt adatokat kell megadni. A ggplot-ot mindig egy geom parancs kÃ¶veti, amellyel az Ã¡bra tÃ­pusÃ¡t adjuk meg. Ezen az Ã¡brÃ¡n azonban mÃ©g nicsen semmilyen felirat. Minden felirat megadhatÃ³ a labs() fÃ¼ggvÃ©nyben. PÃ©lda: ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() + labs( title = &quot;Figyelemfelkelt cÃ­m&quot;, subtitle = &quot;Az alcÃ­m pontosÃ­tja a tÃ©mÃ¡t&quot;, x = &quot;x-tengely vÃ¡ltÃ³zÃ³jÃ¡nak neve&quot;, y = &quot;y-tengely vÃ¡ltozÃ³jÃ¡nak neve&quot;, caption = &quot;Mindent megmagyarÃ¡zÃ³ hosszÃº leÃ­rÃ¡s.&quot; ) Figure 8.2: Feliratok elhelyezÃ©se az Ã¡brÃ¡n 8.3 Esquisse Els lÃ¡tÃ¡sra ez mÃ©g lehet tÃºl sok informÃ¡ciÃ³, illetve a kÃ¶vetkezkben a bonyolultabb Ã¡brÃ¡kra rÃ¡tÃ©rve elveszÃ­theti az ember a fonalat. AmÃ­g bizonytalan a ggplot hasznÃ¡lata javaslom a esquisse packaget Ezt csupÃ¡n telepÃ­teni kell a install.packages(\"esquisse\") paranccsal, majd az Addins menÃ¼bl lehet elhÃ­vni. Ennek segÃ­tsÃ©gÃ©vel manuÃ¡lisan adhatÃ³ak meg az Ã¡bra elemei. LÃ¡ssuk pÃ©ldÃ¡ul az elz Ã¡brÃ¡t! 8.4 SzÃ­n Az esquisse automatikusan hozzÃ¡adott 3 elemet, amit akkor itt tisztÃ¡zni szÃ¼ksÃ©ges. A geom fÃ¼ggvÃ©nyen belÃ¼l a size paramÃ©ter a pontok mÃ©retÃ©rt felel, mÃ­g a color a pontok szÃ­nÃ©Ã©rt. SzÃ­nkÃ©nt megadhatÃ³ bÃ¡rmilyen hexadecimÃ¡lis Ã©rtÃ©k, illetve az R szÃ¡mos szÃ­nt ismer (red, green, blue, black, stb.). #&gt; Error in include_graphics(&quot;images/color_examples.png&quot;): could not find function &quot;include_graphics&quot; 8.5 TÃ©ma A 3. dolog amit esquisse csatolt a kÃ³dunk mellÃ© az egy theme parancs. Ez a parancstÃ­pus az Ã¡bra hÃ¡tterÃ©nek, jelmagyarÃ¡zatÃ¡nak Ã©s feliratainak esztÃ©tikÃ¡jÃ¡t adja meg. LÃ¡ssunk ezekbl is nÃ©hÃ¡nyat! ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() + theme_bw() ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() + theme_classic() ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() + theme_grey() ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() + theme_minimal() Figure 8.3: NÃ©hÃ¡ny elÃ©rhet tÃ©ma Persze van mÃ©g rengeteg, vÃ¡logass nyugodtan: https://www.datanovia.com/en/blog/ggplot-themes-gallery/ Ami mÃ©g fontos, hogy a theme() fÃ¼ggvÃ©nnyel mÃ³dosÃ­thatÃ³ak a tÃ©mÃ¡nk egyes elemei (hÃ¡ttÃ©rszÃ­n, betszÃ­n stb.). PÃ©ldÃ¡ul legyen tÃ©nyleg figyelemfelkelt a fentebb bemutatott cÃ­m! ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() + labs( title = &quot;Figyelemfelkelt cÃ­m&quot;, subtitle = &quot;Az alcÃ­m pontosÃ­tja a tÃ©mÃ¡t&quot;, x = &quot;x-tengely vÃ¡ltÃ³zÃ³jÃ¡nak neve&quot;, y = &quot;y-tengely vÃ¡ltozÃ³jÃ¡nak neve&quot;, caption = &quot;Mindent megmagyarÃ¡zÃ³ hosszÃº leÃ­rÃ¡s.&quot; ) + theme( plot.title = element_text(color = &quot;red&quot;, size = 30) ) Figure 8.4: TÃ©ma egy elmÃ©nek megvÃ¡ltoztatÃ¡sÃ¡ra pÃ©lda 8.6 Geom A plot szempontjÃ¡bÃ³l lÃ©nyeges fontosabb azonban a geom fÃ¼ggvÃ©ny. Maga a fÃ¼ggvÃ©ny adja meg az Ã¡bra tÃ­pusÃ¡t, azonban a benne foglalt paramÃ©terek sem elhanyagolhatÃ³ak. NÃ©zzÃ¼k pÃ©ldÃ¡t a tÃ­pusokra (csak pÃ¡rat van mÃ³dom emlÃ­teni a vÃ©gtelenÃ¼l sokbÃ³l)! ggplot(data = diamonds, mapping = aes(x = carat)) + geom_histogram() ggplot(data = diamonds, mapping = aes(x = carat)) + geom_histogram() + geom_vline(xintercept = mean(diamonds$carat), color = &#39;red4&#39;) ggplot(data = diamonds, mapping = aes(x = cut)) + geom_bar() ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point() #&gt; Error: Can&#39;t add `ggplot(data = diamonds, mapping = aes(x = carat))` to a ggplot object. A 2. kÃ³dbÃ³l lÃ¡tszik, hogy tÃ¶bb geom is tartozhat egyszerre egy Ã¡brÃ¡hoz, Ã­gy lehet pÃ©ldÃ¡ul egy hisztogramon feltÃ¼ntetni az Ã¡tlagot egy fÃ¼ggleges vonallal (geom_vline). Ennek pÃ¡rja is rendkÃ­vÃ¼l hasznos tud lennni a geom_hline, amivel lehet akÃ¡r 0 mentÃ©n hÃºzni egy vÃ­zszintes vonalat. A cut egy kategorikus vÃ¡ltozÃ³ az adattÃ¡blÃ¡nkban, amelynek az egyes kategÃ³riÃ¡khoz tartozÃ³ darabszÃ¡mait egy geom_bar-al gyorsan kirajzolhatjuk. Most nÃ©zzÃ¼k a paramÃ©tereket! Eddig lÃ¡ttunk pÃ©ldÃ¡t a size-ra Ã©s a color-ra, ami majdnem minden geom esetÃ©n csinÃ¡l valamit, de egyes geomoknak vannak speciÃ¡lis paramÃ©tereik is, mint pÃ©lÃ¡ul az elbbi pÃ©ldÃ¡ban az xintercept. LÃ¡ssunk nÃ©hÃ¡ny tovÃ¡bbi fontos paramÃ©terre pÃ©ldÃ¡kat: #&gt; Error in cols_align(., align = &quot;center&quot;): could not find function &quot;cols_align&quot; ggplot(data = diamonds, mapping = aes(x = carat)) + geom_histogram(color = &#39;black&#39;, fill = &quot;red&quot;) ggplot(data = diamonds, mapping = aes(x = carat)) + geom_vline(xintercept = mean(diamonds$carat), lty = 2) ggplot(data = diamonds, mapping = aes(x = cut)) + geom_bar(alpha = .3) ggplot(data = diamonds, mapping = aes(x = carat, y = price)) + geom_point(shape = 21, color = &#39;black&#39;, fill = &#39;green&#39;) #&gt; Error: Can&#39;t add `ggplot(data = diamonds, mapping = aes(x = carat))` to a ggplot object. Az utolsÃ³ Ã¡bra itt mÃ©g igÃ©nyel nÃ©mi magyarÃ¡zatot. A pont diagram alapbeÃ¡llÃ­tÃ¡sa szerint csak color paramÃ©ter adhatÃ³ meg. Azonban ha a shape-t Ã¡tÃ¡llÃ­tjuk, akkor van lehetsÃ©gÃ¼nk olyan pontdiagramokat rajzolni, amelyeknek belsejÃ©hez tartozÃ³ szÃ­nt adja meg a fill, a szegÃ©lyÃ©t a color. 8.7 Aes KorÃ¡bban csak Ã¡tsiklottunk az aes() fÃ¼ggvÃ©nyen, ami az Ã¡bra keretÃ©t adta. Most nÃ©zzÃ¼k meg kicsit rÃ©szletesebben! A mapping paramÃ©ter, aminek megadÃ¡sÃ¡hoz hasznÃ¡ljuk fel az aes()-t az elzekben a ggplot() fÃ¼ggvÃ©nyen belÃ¼l szerepelt. Ennek azonban nem kell feltÃ©tlenÃ¼l Ã­gy lennie. A kÃ¶vetkez 3 kÃ³d, mind ugyanazt hajtja vÃ©gre (erre mÃ©g visszatÃ©rÃ¼nk): ggplot(diamonds, aes(x = carat, y = price)) + geom_point() ggplot(diamonds) + aes(x = carat, y = price) + geom_point() ggplot(diamonds) + geom_point(aes(x = carat, y = price)) Az aes-ben azonban nem csak x- Ã©s y-tengely vÃ¡ltozÃ³it definiÃ¡lhatjuk. Minden ami geom-beni paramÃ©ter, az megadÃ¡sra kerÃ¼lhet az aes()-ben is, azonban ilyenkor az adott vÃ¡ltozÃ³ Ã©rtÃ©ke szerint kerÃ¼l megadÃ¡sra (pl.: egy harmadik vÃ¡ltozÃ³ szerint van definiÃ¡lva a mÃ©ret, vagy a szÃ­n). Ami paramÃ©ter az aes()-ben kerÃ¼l megadÃ¡sra, az automatikusan a jelmagyarÃ¡zatra is felkerÃ¼l. LÃ¡ssunk kÃ©t pÃ©ldÃ¡t! ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point() ggplot(diamonds, aes(x = carat, y = price, size = cut)) + geom_point(alpha = .3) #&gt; Error in (ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point())/(ggplot(diamonds, : non-numeric argument to binary operator Ha egy vÃ¡ltozÃ³ szerint adjuk meg a szÃ­neket, akkor Ã©rdemes a szÃ­nezÃ©snek mÃ³djÃ¡t is megadni. Erre leginkÃ¡bb a viridis fÃ¼ggvÃ©nyek a javasoltak (szÃ¡mos alkalommla lÃ¡thatod tudomÃ¡nyos publikÃ¡ciÃ³kban + vÃ©gzdÃ©sre figyeljÃ¼nk: viridis_d, mint diszkÃ©rt/viridis_c, mint folytonos), de ha pÃ©ldÃ¡ul fontos, hogy fekete-fehÃ©r legyen, arra is van mÃ³d, illetve kÃ©zileg is meg lehet adni szÃ­neket. ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point() ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + scale_color_viridis_d(option = &quot;magma&quot;) ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + scale_color_manual( values = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;) ) #&gt; Error in (ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point())/(ggplot(diamonds, : non-numeric argument to binary operator Ãs most vissza oda, hogy miÃ©rt is hasznos, hogy tÃ¶bb aes() definiÃ¡lhatÃ³ egyetlen Ã¡brÃ¡n. ElkÃ©pzelhet, hogy kÃ©t kÃ¼lÃ¶n geom-ot hasznÃ¡lunk egyÃ¼tt. Legyen mondjuk egy pontdiagram Ã©s egy azokra illesztett trendvonal. UtÃ³bbi a geom_smooth paranccsal Ã©rhet el, s amennyiben lineÃ¡ris fÃ¼ggvÃ©ny formÃ¡ra vÃ¡gyunk (yes), Ãºgy adjuk meg neki a method = \"lm\" paramÃ©tert. ggplot(diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + geom_smooth(method = &quot;lm&quot;) #&gt; `geom_smooth()` using formula &#39;y ~ x&#39; Figure 8.5: LineÃ¡ris trend illesztÃ©se pontdiagramra Mint lÃ¡tjuk jelen esetben a geom_smooth ugyanazt az aes()-t alkalmazza, mint a geom_point. Ez azonban problÃ©mÃ¡s, ha nem akarunk a kategorikus ismÃ©rv mentÃ©n 5 kÃ¼lÃ¶n trendvonalat illeszteni. Ilyenkor jelent megoldÃ¡s egy Ãºj aes() megadÃ¡sa egyetlen Ã¡brÃ¡n belÃ¼l. ggplot(diamonds) + geom_point(aes(x = carat, y = price, color = cut)) + geom_smooth(aes(x = carat, y = price), method = &quot;lm&quot;) #&gt; `geom_smooth()` using formula &#39;y ~ x&#39; Figure 8.6: LineÃ¡ris trend illesztÃ©se pontdiagramra kÃ©t kÃ¼lÃ¶n esztÃ©tika fÃ¼ggvÃ©nnyel 8.8 Facet A facet az utolsÃ³ parancs amit Ã©rinteni kÃ­vÃ¡nunk. Ennek segÃ­tsÃ©gÃ©vel lehetsÃ©g van egy Ã¡bra felosztÃ¡sÃ¡ra valamely vÃ¡ltozÃ³ mentÃ©n. PÃ©ldÃ¡ul a cut vÃ¡ltozÃ³ szerint csoportosÃ­tva megtekintve a pontdiagramok: ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + facet_wrap(~ cut) Figure 8.7: Facet alkalmazÃ¡sa egy vÃ¡ltozÃ³ szerint Ha pedig soronkÃ©nt Ã©s oszloponkÃ©nt is akarunk csoportosÃ­tani: ggplot(diamonds, aes(x = carat, y = price)) + geom_point() + facet_grid(color ~ cut) Figure 8.8: Facet alkalmazÃ¡sa kÃ©t vÃ¡ltozÃ³ szerint 8.9 KitekintÃ©s A ggplot2 logikusan felÃ©pÃ­tett mkÃ¶dÃ©se annyira a felhasznÃ¡lÃ³k kedvencÃ©vÃ© tette, hogy szÃ¡mos kiegÃ©szÃ­tÃ³ package Ã©pÃ¼lt rÃ¡: ggpubs, GGally, gganimate, stb. Ezek jelenleg nem rÃ©szei a tananyagnak, azonban Ã©rdemes rÃ¡juk nÃ©zni, ha szakdolgozat vagy TDK prezentÃ¡lÃ¡sa sorÃ¡n szeretnÃ©d lenygÃ¶zni a kÃ¶zÃ¶nsÃ©ged. KedvcsinÃ¡lÃ³: "],["lecture5.html", "Chapter 9 Lecture 5 9.1 Motivation", " Chapter 9 Lecture 5 In this chapter, youll learn how to wrap ggplot2 and dplyr function in a Shiny app. (If you dont use the tidyverse, you can skip this chapter .) The techniques for wrapping ggplot2 and dplyr functions in a functions and package, are a a little different and covered in other resources like Using ggplot2 in packages or Programming with dplyr. 9.1 Motivation Imagine I want to create an app that allows you to filter a numeric variable to select rows that are greater than a threshold. You might write something like this: Lets begin with this call to filter() which uses a data-variable (carat) and an env-variable (min): ggplot(cars, aes(speed, dist)) + geom_point() "],["seminar5.html", "Chapter 10 Seminar 5", " Chapter 10 Seminar 5 "],["lecture6.html", "Chapter 11 Lecture 6 11.1 Motivation", " Chapter 11 Lecture 6 In this chapter, youll learn how to wrap ggplot2 and dplyr function in a Shiny app. (If you dont use the tidyverse, you can skip this chapter .) The techniques for wrapping ggplot2 and dplyr functions in a functions and package, are a a little different and covered in other resources like Using ggplot2 in packages or Programming with dplyr. 11.1 Motivation Imagine I want to create an app that allows you to filter a numeric variable to select rows that are greater than a threshold. You might write something like this: Lets begin with this call to filter() which uses a data-variable (carat) and an env-variable (min): ggplot(cars, aes(speed, dist)) + geom_point() "],["seminar6.html", "Chapter 12 Seminar 6 12.1 Motivation", " Chapter 12 Seminar 6 In this chapter, youll learn how to wrap ggplot2 and dplyr function in a Shiny app. (If you dont use the tidyverse, you can skip this chapter .) The techniques for wrapping ggplot2 and dplyr functions in a functions and package, are a a little different and covered in other resources like Using ggplot2 in packages or Programming with dplyr. 12.1 Motivation Imagine I want to create an app that allows you to filter a numeric variable to select rows that are greater than a threshold. You might write something like this: Lets begin with this call to filter() which uses a data-variable (carat) and an env-variable (min): ggplot(cars, aes(speed, dist)) + geom_point() "],["lecture7.html", "Chapter 13 Lecture 7 13.1 Motivation", " Chapter 13 Lecture 7 In this chapter, youll learn how to wrap ggplot2 and dplyr function in a Shiny app. (If you dont use the tidyverse, you can skip this chapter .) The techniques for wrapping ggplot2 and dplyr functions in a functions and package, are a a little different and covered in other resources like Using ggplot2 in packages or Programming with dplyr. 13.1 Motivation Imagine I want to create an app that allows you to filter a numeric variable to select rows that are greater than a threshold. You might write something like this: Lets begin with this call to filter() which uses a data-variable (carat) and an env-variable (min): ggplot(cars, aes(speed, dist)) + geom_point() "],["seminar7.html", "Chapter 14 Seminar 7 14.1 Motivation", " Chapter 14 Seminar 7 In this chapter, youll learn how to wrap ggplot2 and dplyr function in a Shiny app. (If you dont use the tidyverse, you can skip this chapter .) The techniques for wrapping ggplot2 and dplyr functions in a functions and package, are a a little different and covered in other resources like Using ggplot2 in packages or Programming with dplyr. 14.1 Motivation Imagine I want to create an app that allows you to filter a numeric variable to select rows that are greater than a threshold. You might write something like this: Lets begin with this call to filter() which uses a data-variable (carat) and an env-variable (min): ggplot(cars, aes(speed, dist)) + geom_point() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
